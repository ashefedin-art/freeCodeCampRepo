** start of main.py **

class Rectangle:
    """
    A class to represent a rectangle.

    Attributes
    ----------
    width : int
        the width of the rectangle
    height : int
        the height of the rectangle

    Methods
    -------
    set_width(width):
        Sets the width of the rectangle.
    set_height(height):
        Sets the height of the rectangle.
    get_area():
        Calculates and returns the area of the rectangle.
    get_perimeter():
        Calculates and returns the perimeter of the rectangle.
    get_diagonal():
        Calculates and returns the diagonal of the rectangle.
    get_picture():
        Returns a string representation of the rectangle using asterisks.
    get_amount_inside(shape):
        Calculates how many times another shape can fit inside this rectangle.
    """

    def __init__(self, width, height):
        """Constructs all the necessary attributes for the rectangle object."""
        self.width = width
        self.height = height

    def __str__(self):
        """Returns the string representation of the Rectangle instance."""
        return f'Rectangle(width={self.width}, height={self.height})'

    def set_width(self, width):
        """Sets the width of the rectangle."""
        self.width = width

    def set_height(self, height):
        """Sets the height of the rectangle."""
        self.height = height

    def get_area(self):
        """Returns the area of the rectangle (width * height)."""
        return self.width * self.height

    def get_perimeter(self):
        """Returns the perimeter of the rectangle (2 * width + 2 * height)."""
        return (2 * self.width) + (2 * self.height)

    def get_diagonal(self):
        """Returns the diagonal of the rectangle using the Pythagorean theorem."""
        return (self.width ** 2 + self.height ** 2) ** 0.5

    def get_picture(self):
        """
        Returns a string that represents the shape using lines of '*'.
        If width or height is > 50, returns 'Too big for picture.'.
        """
        if self.width > 50 or self.height > 50:
            return 'Too big for picture.'
        
        # Create the picture string by repeating '*' for the width
        # and adding a newline, repeated for the height.
        picture = ('*' * self.width + '\n') * self.height
        return picture

    def get_amount_inside(self, shape):
        """
        Returns the number of times the passed-in shape can fit inside
        this rectangle (with no rotations).
        """
        # Use integer division to see how many times the shape fits
        # along the width and height.
        width_fit = self.width // shape.width
        height_fit = self.height // shape.height
        return width_fit * height_fit


class Square(Rectangle):
    """
    A class to represent a square, subclass of Rectangle.

    Attributes
    ----------
    side : int
        the side length of the square

    Methods
    -------
    set_side(side):
        Sets the side length of the square, updating both width and height.
    """

    def __init__(self, side):
        """
        Constructs all the necessary attributes for the square object.
        It calls the parent Rectangle's __init__ method with the side
        for both width and height.
        """
        super().__init__(side, side)

    def __str__(self):
        """Returns the string representation of the Square instance."""
        return f'Square(side={self.width})'

    def set_side(self, side):
        """Sets the side of the square, updating both width and height."""
        self.width = side
        self.height = side
    
    def set_width(self, side):
        """Sets the width of the square, also updating the height."""
        self.set_side(side)

    def set_height(self, side):
        """Sets the height of the square, also updating the width."""
        self.set_side(side)

** end of main.py **

